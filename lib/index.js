"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
require("babel-polyfill");
var middlewares_1 = require("./middlewares");
var Tora_1 = require("./libs/Tora");
var post_1 = require("./models/post");
var PluginsManager_1 = require("./libs/PluginsManager");
var express = require("express");
var index_1 = require("./models/index");
var conf_1 = require("./utils/conf");
var Logger_1 = require("./utils/Logger");
var mongodbURL_1 = require("./utils/mongodbURL");
var app = express();
middlewares_1.default(app);
index_1.connectDatabase(mongodbURL_1.default(conf_1.default.get('database:host'), conf_1.default.get('database:port'), conf_1.default.get('database:table'))).then(function () {
    new post_1.default({
        title: '123',
        type: 'string',
        date: new Date(),
        updateDate: new Date(),
        content: 'aaa',
        source: 'bbb',
        categories: ['asd'],
        tags: ['dsa']
    }).save();
    Logger_1.default.info('Database connect success!');
    Tora_1.default.eventEmitter.emit('connectDatabaseSuccess');
}).catch(function (err) {
    Logger_1.default.error('Unable to connect to the database!\n', err);
    Tora_1.default.eventEmitter.emit('connectDatabaseError', err);
});
var server = app.listen(conf_1.default.get('server:port') || 3000, function () {
    var host = server.address().address;
    var port = server.address().port;
    Logger_1.default.info('Example app listening at http://%s:%s', host, port);
});
PluginsManager_1.loadPlugins();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsUUFBd0I7QUFDeEIsNEJBQWlEO0FBQ2pELHFCQUErQjtBQUUvQixxQkFBc0M7QUFDdEMsK0JBQW9EO0FBQ3BELHNCQUFtQztBQUNuQyxzQkFBaUQ7QUFFakQscUJBQWtDO0FBQ2xDLHVCQUFvQztBQUNwQywyQkFBNEM7QUFFNUMsSUFBTSxBQUFHLE1BQUcsQUFBTyxBQUFFLEFBQUM7QUFFdEIsY0FBb0IsUUFBQyxBQUFHLEFBQUMsQUFBQztBQUUxQixRQUFlLGdCQUFDLGFBQVUsUUFBQyxPQUFNLFFBQUMsQUFBRyxJQUFDLEFBQWUsQUFBQyxrQkFBRSxPQUFNLFFBQUMsQUFBRyxJQUFDLEFBQWUsQUFBQyxrQkFBRSxPQUFNLFFBQUMsQUFBRyxJQUFDLEFBQWdCLEFBQUMsQUFBQyxBQUFDLG9CQUNoSCxBQUFJLEtBQUM7QUFDSixRQUFJLE9BQVM7QUFDWCxBQUFLLGVBQUUsQUFBSztBQUNaLEFBQUksY0FBRSxBQUFRO0FBQ2QsQUFBSSxjQUFFLElBQUksQUFBSTtBQUNkLEFBQVUsb0JBQUUsSUFBSSxBQUFJO0FBQ3BCLEFBQU8saUJBQUUsQUFBSztBQUNkLEFBQU0sZ0JBQUUsQUFBSztBQUNiLEFBQVUsb0JBQUUsQ0FBQyxBQUFLLEFBQUM7QUFDbkIsQUFBSSxjQUFFLENBQUMsQUFBSyxBQUFDLEFBQ2QsQUFBQztBQVRZLE9BU1gsQUFBSSxBQUFFLEFBQUM7QUFDVixhQUFNLFFBQUMsQUFBSSxLQUFDLEFBQTJCLEFBQUMsQUFBQztBQUN6QyxXQUFJLFFBQUMsQUFBWSxhQUFDLEFBQUksS0FBQyxBQUF3QixBQUFDLEFBQUMsQUFDbkQ7QUFBQyxBQUFDLEdBQ0QsQUFBSyxNQUFDLFVBQUMsQUFBRztBQUNULGFBQU0sUUFBQyxBQUFLLE1BQUMsQUFBc0Msd0NBQUUsQUFBRyxBQUFDLEFBQUM7QUFDMUQsV0FBSSxRQUFDLEFBQVksYUFBQyxBQUFJLEtBQUMsQUFBc0Isd0JBQUUsQUFBRyxBQUFDLEFBQUMsQUFDdEQ7QUFBQyxBQUFDLEFBQUM7QUFFTCxJQUFNLEFBQU0sYUFBTyxBQUFNLE9BQUMsT0FBTSxRQUFDLEFBQUcsSUFBQyxBQUFhLEFBQUMsa0JBQUksQUFBSSxNQUFFO0FBQzNELFFBQU0sQUFBSSxPQUFHLEFBQU0sT0FBQyxBQUFPLEFBQUUsVUFBQyxBQUFPLEFBQUM7QUFDdEMsUUFBTSxBQUFJLE9BQUcsQUFBTSxPQUFDLEFBQU8sQUFBRSxVQUFDLEFBQUksQUFBQztBQUVuQyxhQUFNLFFBQUMsQUFBSSxLQUFDLEFBQXVDLHlDQUFFLEFBQUksTUFBRSxBQUFJLEFBQUMsQUFBQyxBQUNuRTtBQUFDLEFBQUMsQUFBQyxDQUxZLEFBQUc7QUFRbEIsaUJBQVcsQUFBRSxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCc7XG5pbXBvcnQgSW5qZWN0aW9uTWlkZGxld2FyZXMgZnJvbSAnLi9taWRkbGV3YXJlcyc7XG5pbXBvcnQgVG9yYSBmcm9tICcuL2xpYnMvVG9yYSc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IFBvc3RNb2RlbCBmcm9tICcuL21vZGVscy9wb3N0JztcbmltcG9ydCB7IGxvYWRQbHVnaW5zIH0gZnJvbSAnLi9saWJzL1BsdWdpbnNNYW5hZ2VyJztcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBjb25uZWN0RGF0YWJhc2UgfSBmcm9tICcuL21vZGVscy9pbmRleCc7XG5pbXBvcnQgeyBzZXR1cE5jb25mIH0gZnJvbSAnLi91dGlscy9jb25mJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi91dGlscy9jb25mJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi91dGlscy9Mb2dnZXInO1xuaW1wb3J0IG1vbmdvZGJVUkwgZnJvbSAnLi91dGlscy9tb25nb2RiVVJMJztcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5JbmplY3Rpb25NaWRkbGV3YXJlcyhhcHApO1xuXG5jb25uZWN0RGF0YWJhc2UobW9uZ29kYlVSTChjb25maWcuZ2V0KCdkYXRhYmFzZTpob3N0JyksIGNvbmZpZy5nZXQoJ2RhdGFiYXNlOnBvcnQnKSwgY29uZmlnLmdldCgnZGF0YWJhc2U6dGFibGUnKSkpXG4gIC50aGVuKCgpID0+IHtcbiAgICBuZXcgUG9zdE1vZGVsKHtcbiAgICAgIHRpdGxlOiAnMTIzJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGF0ZTogbmV3IERhdGUsXG4gICAgICB1cGRhdGVEYXRlOiBuZXcgRGF0ZSxcbiAgICAgIGNvbnRlbnQ6ICdhYWEnLFxuICAgICAgc291cmNlOiAnYmJiJyxcbiAgICAgIGNhdGVnb3JpZXM6IFsnYXNkJ10sXG4gICAgICB0YWdzOiBbJ2RzYSddXG4gICAgfSkuc2F2ZSgpO1xuICAgIExvZ2dlci5pbmZvKCdEYXRhYmFzZSBjb25uZWN0IHN1Y2Nlc3MhJyk7XG4gICAgVG9yYS5ldmVudEVtaXR0ZXIuZW1pdCgnY29ubmVjdERhdGFiYXNlU3VjY2VzcycpO1xuICB9KVxuICAuY2F0Y2goKGVycikgPT4ge1xuICAgIExvZ2dlci5lcnJvcignVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlIVxcbicsIGVycik7XG4gICAgVG9yYS5ldmVudEVtaXR0ZXIuZW1pdCgnY29ubmVjdERhdGFiYXNlRXJyb3InLCBlcnIpO1xuICB9KTtcblxuY29uc3Qgc2VydmVyID0gYXBwLmxpc3Rlbihjb25maWcuZ2V0KCdzZXJ2ZXI6cG9ydCcpIHx8IDMwMDAsICgpID0+IHtcbiAgY29uc3QgaG9zdCA9IHNlcnZlci5hZGRyZXNzKCkuYWRkcmVzcztcbiAgY29uc3QgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydDtcblxuICBMb2dnZXIuaW5mbygnRXhhbXBsZSBhcHAgbGlzdGVuaW5nIGF0IGh0dHA6Ly8lczolcycsIGhvc3QsIHBvcnQpO1xufSk7XG5cbi8vIExvYWQgUGx1Z2luc1xubG9hZFBsdWdpbnMoKTtcbiJdfQ==